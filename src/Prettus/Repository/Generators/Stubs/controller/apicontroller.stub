<?php

$NAMESPACE$

use Dingo\Api\Routing\Helpers;
use Prettus\Validator\Contracts\ValidatorInterface;
use Prettus\Validator\Exceptions\ValidatorException;
use $APPNAME$Http\Requests\$CLASS$CreateRequest;
use $APPNAME$Http\Requests\$CLASS$UpdateRequest;
$REPOSITORY$
$VALIDATOR$

/**
 * Class $CONTROLLER$Controller.
 * @package $NAMESPACE$
 */
class $CONTROLLER$Controller extends Controller
{
    use Helpers;

    /**
     * @var $CLASS$Repository
     */
    protected $repository;

    /**
     * @var $CLASS$Validator
     */
    protected $validator;

    /**
     * $CONTROLLER$Controller constructor.
     * @param $CLASS$Repository $repository
     * @param $CLASS$Validator $validator
     */
    public function __construct($CLASS$Repository $repository, $CLASS$Validator $validator)
    {
        $this->repository = $repository;
        $this->validator  = $validator;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     * @throws \ErrorException
     */
    public function index()
    {
        $$PLURAL$ = $this->repository->orderBy('id', 'DESC')->all();
        return $this->response->array($$PLURAL$);
    }

    /**
     * Store a newly created resource in storage.
     * @param  $CLASS$CreateRequest $request
     * @return \Illuminate\Http\Response 201 Location
     */
    public function store($CLASS$CreateRequest $request)
    {
        try {
            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_CREATE);
            $$SINGULAR$ = $this->repository->create($request->all())->toArray();
            $location = url()->full() . '/' . $$SINGULAR$['id'];
            return $this->response->created($location, $$SINGULAR$);
        } catch (ValidatorException $e) {
            return response()->json([
                'error'   => true,
                'message' => $e->getMessageBag()
            ]);
        }
    }

    /**
     * Display the specified resource.
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $$SINGULAR$ = $this->repository->find($id);
        return $$SINGULAR$;
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  $CLASS$UpdateRequest $request
     * @param  string $id
     * @return \Illuminate\Http\Response 201 Location
     */
    public function update($CLASS$UpdateRequest $request, $id)
    {
        try {
            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_UPDATE);
            $$SINGULAR$ = $this->repository->update($request->all(), $id)->toArray();
            $location = url()->full() . '/' . $$SINGULAR$['id'];
            return $this->response->created($location, $$SINGULAR$);
        } catch (ValidatorException $e) {
            return response()->json([
                'error'   => true,
                'message' => $e->getMessageBag()
            ]);
        }
    }

    /**
     * Remove the specified resource from storage.
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $deleted = $this->repository->delete($id);
        return response()->json([
            'message' => '$CLASS$ deleted.',
            'deleted' => $deleted,
        ]);
    }
}
